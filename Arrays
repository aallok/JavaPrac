import java.util.*;
public class ArraysCC{
   // Passing arrays as argument
    // public static void update(int marks[], int nonchangable){
    //     nonchangable = 10;
    //     for(int i=0; i<marks.length; i++){
    //         marks[i] = marks[i] + 1;
    //     }
    // }



   //Linear Search
    //    public static int linearSearch(int numbers[], int key){
    //     for(int i=0; i<numbers.length; i++){
    //     if(numbers[i]==key){
    //        return i;
    //     }
    //   }  
    //     return -1;
    //    }



   //Largest number
    //  public static int getLargest(int numbers[]){
    //    int largest = Integer.MIN_VALUE;//-infinity
    //    int smallest = Integer.MAX_VALUE;

    //    for(int i = 0; i < numbers.length; i++){
    //       if(largest < numbers[i]){
    //          largest = numbers[i];
    //       }
    //       if(smallest > numbers[i]){
    //          smallest = numbers[i];

    //       } 
    //    }
    //    System.out.println("smallest value is : " + smallest);
    //    return largest;
    //  }


    
   //Binary Search
    // public static int binarySearch(int numbers[], int key){
    //   int start = 0, end = numbers.length-1;

    //   while(start <= end){
    //     int mid = (start + end)/2;
    //     //comparisons
    //     if(numbers[mid]==key){
    //       return mid;
    //     }
    //     if(numbers[mid]<key){//right
    //       start = mid+1;
    //     }else{//left
    //       end = mid-1;
    //     }
    //   }
    //   return-1;
    // }



   //Reverse an Array
    //  public static void reverse(int numbers[]){
    //   int first = 0, last = numbers.length-1;

    //   while(first<last){
    //     //swap
    //     int temp = numbers[last];
    //     numbers[last] = numbers[first];
    //     numbers[first] = temp; 

    //     first++;
    //     last--;
    //   }
    //  }



   //Pairs in an Array
   //  public static void printPairs(int numbers[]){
   //   for(int i=0; i<numbers.length; i++){
   //     int current = numbers[i];//2,4,6,8,10
   //     for(int j=i+1; j<numbers.length; j++){
   //    System.out.print("(" + current + "," + numbers[j] + ")");
   //     }
   //     System.out.println();
   //   }
   //  }


   //Print Subarrays
   //  public static void printSubarrays(int numbers[]){
   //   for(int i=0; i<numbers.length; i++){
   //     int start=i;
   //     for(int j=i; j<numbers.length; j++){
   //       int end = j;
   //       for(int k=start; k<=end; k++){
   //       System.out.print(numbers[k] + " ");
   //       }
   //       System.out.println();
   //     }
   //     System.out.println();
   //   }
   //  }



   //Max Subarray Sum
   //  public static void maxSubarraySum(int numbers[]){
   //   int currSum = 0;
   //   int maxSum = Integer.MIN_VALUE;

   //   for(int i=0; i<numbers.length; i++){
   //    int start = i;

   //    for(int j=i; j<numbers.length; j++){
   //     int end = j;
   //     currSum = 0;
   //     for(int k=start; k<=end; k++){//print
   //       //subarray
   //       currSum += numbers[k];
   //     }
   //     System.out.println(currSum);
   //     if(maxSum<currSum){
   //       maxSum = currSum;
   //     }
   //    }
   //   }
   //   System.out.println("maxSum =" + maxSum);
   //  }



   //Max Subarray Sum (Prefix Sum)
   //  public static void maxSubarraySum(int numbers[]){
   //   int currSum = 0;
   //   int maxSum = Integer.MIN_VALUE;
   //   int prefix[] = new int[numbers.length];

   //   prefix [0] = numbers[0];
   //   //calculate prefix array
   //   for(int i=1; i<prefix.length; i++){
    //     prefix[i] = prefix[i-1] + numbers[i];
   //   }
   //   for(int i=0; i<numbers.length; i++){
   //     int start = i;
 
   //     for(int j=i; j<numbers.length; j++){
   //       int end = j;
   //       currSum = start == 0? prefix[end]: prefix[end] - prefix[start-1];

   //        if(maxSum < currSum){
   //         maxSum = currSum;
   //        }
   //     }
   //   }
   //   System.out.println("maxSum = " + maxSum);
   //  }



   //  // Max Subarray Sum(KADANE's)
   //  public static void kadanes(int numbers[]){
   //   int maxSum =Integer.MIN_VALUE;
   //   int currSum = 0;

   //   for(int i=0; i<numbers.length; i++){
   //     currSum = currSum+ numbers[i];
   //     if(currSum<0){
   //       currSum=0;
   //     }
   //     maxSum=Math.max(currSum,maxSum);
   //   }
   //   System.out.println("our max subarray sum is :" + maxSum);
   //  }



   //Trapped Rain Water
  //  public static int trappedRainwater(int height[]){
  //   int n = height.length;

  //   //calculate left max boundary-array
  //   int leftMax[] = new int[n];
  //   leftMax[0]= height[0];
  //   for(int i=1; i<n; i++){
  //     leftMax[i] = Math.max (height[i], leftMax[i-1]);
  //   }
  //  //calculate right max boundary-array
  //  int rightMax[]=new int[n];
  //  rightMax[n-1]=height[n-1];
  //  for(int i=n-2; i>=0; i--){
  //   rightMax[i]=Math.max(height[i],rightMax[i+1]);
  //  }
  //  int trappedWater = 0;

  //  //loop
  //  for(int i=0; i<n; i++) {
  //   //water Level = min(leftmax bound,rightmax bound)
  //   int waterLevel = Math.min(leftMax[i], rightMax[i]);
  //   //trapped water= water=waterlevel-height[i]
  //   trappedWater+= waterLevel-height[i];
  //  }
  //  return trappedWater;
  //   }
     
    public static void main(String args[]){

     //Passing arrays as argument countinue
      // int marks[] = {97,98,99};
      // int nonchangable = 5;
      // update(marks,nonchangable);//passing the array and value to be updated in       // System.out.println(nonchangable);
      // //print our marks
      // for(int i=0; i<marks.length; i++){
      //  System.out.print(marks[i]+" ");   
      // }
      // System.out.println();


    //Linear Search continue
     //  int numbers[] = {2,4,6,8,10,12,14,16};
     //  int key = 10;//searching for this number

     //  int index = linearSearch(numbers,key);
     //  if(index==-1){
     //   System.out.println("Not found!");
     //  }else{
     //   System.out.println("key is at index : " + index);
     //  }


    //Largest Nummber continue
     //  int numbers[] = {1,2,6,3,5};
     //  System.out.println("largest value is : " + getLargest(numbers));
    


    //Binary Search continue
     //  int numbers[]={2,4,6,8,10,12,14};
     //  int key = 10;
     //  System.out.println("index for key is:" + binarySearch(numbers, key));


    //Reverse an Array continue
     //  int numbers[] = {2,4,6,8,10};
 
     //  reverse(numbers);  

     //  //print
     //  for(int i = 0; i<numbers.length; i++){
     //   System.out.print(numbers[i]+" ");
     //  }
     //  System.out.println();


    //pairs in an array continue
     //  int numbers[] = {2,4,6,8,10};
     //  printPairs(numbers);


    //print Subarrays continue
     // int numbers[] = {2,4,6,8,10};
     // printSubarrays(numbers);


    //max Subarray Sum continue
     // int numbers[] = {1,-2,6,-1,3};
     // maxSubarraySum(numbers);


    //max Snbarray Sum (prefix sum) continue
      // int numbers[] = {1,-2,6,-1,3};
      // maxSubarraySum(numbers);


    //Max Subarray sum(kADANE's) continue
      //int numbers[] = {-2,-3,4,-1,-2,1,5,-3};
      //kadanes(numbers);  



    //Trapping Rain Water continue
      // int height[] ={4,2,0,6,3,2,5};
      // System.out.println(trappedRainwater(height));
      
      
    // 1] Creating an Array
    // int marks[]= {1,2,3};
      
    //2] Intput/Output
    //    int marks[] = new int[100];
    //    Scanner sc = new Scanner(System.in);
       
    //    marks[0] = sc.nextInt();//phy
    //    marks[1] = sc.nextInt();//chem
    //    marks[2] = sc.nextInt();//math

    //    System.out.println("phy:" + marks[0]);
    //    System.out.println("chem:" + marks[1]);
    //    System.out.println("math:" + marks[2]);

    //    int percentage = (marks[0] + marks[1] + marks[2])/3;

    //    System.out.println("percentage = " + percentage + "%");


    //to find length od an array 
    //     System.out.println("length of array = " + marks.length);



    

    


















































    }
}
